openapi: 3.0.0
info:
  title: sheepCRM API
  version: 1.0.0
  description: |
    The sheepCRM API is a RESTful API that allows you to access and manipulate data in
    your sheepCRM database. Sheep was built with an API-first approach, so all of the
    functionality you see in the web interface is available via the API.

    The API is designed to be used by developers to build custom integrations and
    applications. It is not designed to be used by end users, although some of the
    endpoints are available to end users via the self-service app.

    Please report any inaccuracies or omissions to support@sheepcrm.com on the
    understanding that this documentation is a work in progress and will be updated
    regularly.

servers:
  - url: https://sls-api.sheepcrm.com

# securitySchemes:
#   bearerAuth:
#     type: http
#     scheme: bearer
#     bearerFormat: sheep API token

# security:
#   - bearerAuth: []         # use the same name as above

paths:

  /api/v2/{bucket}/{resource_type}/{uid}/avatar:
    $ref: 'requests/Core.yaml#/Avatar'

  /api/v2/{bucket}/{resource_type}/{uid}/display:
    $ref: 'requests/Core.yaml#/Display'

  /api/v2/find/person/{bucket}:
    $ref: 'requests/Person.yaml#/PersonFind'

  /api/v2{contact_uri}summary:
    $ref: 'requests/Contacts.yaml#/ContactSummary'

  /api/v2{person_uri}communications/detail:
    $ref: 'requests/Person.yaml#/PersonCommunicationsDetail'

  /api/v2{person_uri}personal/detail:
    $ref: 'requests/Person.yaml#/PersonPersonalDetail'

  /api/v2{person_uri}membership/all:
    $ref: 'requests/Person.yaml#/PersonMembershipAll'

  /api/v2{bucket}/member/{uid}/:
    $ref: 'requests/Member.yaml#/MembershipSingle'

  /api/v2{bucket}/member/{uid}/detail:
    $ref: 'requests/Member.yaml#/MembershipDetail'

  /audit/v2/{bucket}/audit:
    $ref: 'requests/Audit.yaml#/Audit'

  /audit/v2/{bucket}/{resource_type}/{uid}/audit:
    $ref: 'requests/Audit.yaml#/AuditSingle'

  /api/v2/{bucket}/{resource_type}/{uid}/provenance:
    $ref: 'requests/Audit.yaml#/Provenance'


# People Endpoints
# ----------------

# The following endpoints are designed for access to the data of a single person contact.

# Equity, Diversity and Inclusion (EDI)
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# *POLICY*: `person.edi.detail`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/edi/detail "Authorization: Bearer $API_KEY"

# *POLICY*: `person.edi.summary`

# "Summary" hides the values showing just if the fields have been populated

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/edi/summary "Authorization: Bearer $API_KEY"

# Finance
# ^^^^^^^

# *POLICY*: `person.finance.summary`

# "Summary" shows only recent past and immediate future payments.

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/finance/summary "Authorization: Bearer $API_KEY"

# *POLICY*: `person.finance.all`

# "All" includes all payments and all financial external ids

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/finance/all "Authorization: Bearer $API_KEY"



# Groups / Teams
# ^^^^^^^^^^^^^^

# The list of all groups/teams that the person is a member of.

# *POLICY*: `person.group.summary`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/group/summary "Authorization: Bearer $API_KEY"


# The list of all groups/teams that the person is a member of augmented with group data and available roles and status fields.

# *POLICY*: `person.group.detail`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/group/detail "Authorization: Bearer $API_KEY"

# Health data
# ^^^^^^^^^^^

# *POLICY*: `person.health.detail`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/health/detail "Authorization: Bearer $API_KEY"

# *POLICY*: `person.health.summary`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/health/summary "Authorization: Bearer $API_KEY"

# Sessions
# ^^^^^^^^

# Person Session Summary is a list of attendance records for the person within a recent time window (typically 45 days before and 45 days after today)

# :limit:
# 	the number of sessions to return - default is 7

# *POLICY*: `person.session.summary`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/session/summary "Authorization: Bearer $API_KEY"

# Person Session Detail includes empty sessions for bookings linked to segments or groups that this person belongs to.

# *POLICY*: `person.session.detail`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/session/detail "Authorization: Bearer $API_KEY"

# *POLICY*: `person.session.all`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/session/all "Authorization: Bearer $API_KEY"

# *POLICY*: `person.session.all`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/session/future "Authorization: Bearer $API_KEY"

# *POLICY*: `person.session.all`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/session/past "Authorization: Bearer $API_KEY"

# Vehicles
# ^^^^^^^^


# *POLICY*: `person.vehicles.all`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/vehicles/all "Authorization: Bearer $API_KEY"


# Vehicle detail augments the stored data with live data from DVLA.

# *POLICY*: `person.vehicles.detail`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/person/{uid}/vehicles/detail "Authorization: Bearer $API_KEY"

# Organisation Endpoints
# ----------------------

# The following endpoints are designed for access to the data of a single org contact.

# Summary data
# ^^^^^^^^^^^^

# *POLICY*: `organisation.summary`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/organisation/{uid}/summary "Authorization: Bearer $API_KEY"



# Group Endpoints
# ---------------

# *POLICY*: `group`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/group/ "Authorization: Bearer $API_KEY"

# *POLICY*: `group.all`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/group/all "Authorization: Bearer $API_KEY"


# Group Members
# ^^^^^^^^^^^^^

# :expansions:
# 	`open_tasks` - include the number of open tasks per group member

# :status:
# 	filter group members by stat

# *POLICY*: `group.members`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/group/{uid}/members/all "Authorization: Bearer $API_KEY"


# Sessions summary for a group
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Bookings plus/minus 90 days with a summary of session attendance

# *POLICY*: `group.session.summary`

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/group/{uid}/session/summary "Authorization: Bearer $API_KEY"


# System / User
# -------------

# User Permissions
# ^^^^^^^^^^^^^^^^

# Returns the user permissions for your user

# .. code-block:: http

# 	http https://sls-api.sheepcrm.com/api/v2/{bucket}/user/permissions "Authorization: Bearer $API_KEY"

# To be documented
# ----------------

# - http: 'GET /api/v2/{bucket}/{resource_type}/{uid}/image/{field}/{style}'



  #
  # Events
  #
  /events/v2/{bucket}:
    $ref: 'requests/Events.yaml#/Events'

  /events/v2/{bucket}/bookings/{state}:
    $ref: 'requests/Events.yaml#/EventsByState'

  /events/v2/{bucket}/booking/{uid}:
    $ref: 'requests/Events.yaml#/EventSingle'

  /events/v2/{bucket}/booking/{uid}/rebase/tickets:
    $ref: 'requests/Events.yaml#/EventSingleRebaseTickets'

  /events/v2/{bucket}/booking/{uid}/rebase/questions:
    $ref: 'requests/Events.yaml#/EventSingleRebaseQuestions'

  /events/v2/{bucket}/booking/{uid}/summary:
    $ref: 'requests/Events.yaml#/EventSingleSummary'

  /events/v2/{bucket}/booking/{uid}/attendance:
    $ref: 'requests/Events.yaml#/EventAttendance'

  /events/v2/{bucket}/booking/{uid}/attendance/all:
    $ref: 'requests/Events.yaml#/EventAttendanceAll'

  /events/v2/{bucket}/booking/{uid}/attendance/export:
    $ref: 'requests/Events.yaml#/EventAttendanceExport'

  /events/v2/{bucket}/booking/{uid}/available_tickets:
    $ref: 'requests/Events.yaml#/EventAvailableTickets'

  /events/v2/{bucket}/booking/{uid}/orders:
    $ref: 'requests/Events.yaml#/EventOrders'

  /events/v2/{bucket}/person/{uid}/orders:
    $ref: 'requests/Events.yaml#/EventOrdersForContact'

  /events/v2/{bucket}/booking/{uid}/orders/export:
    $ref: 'requests/Events.yaml#/EventOrdersExport'

  /events/v2/{bucket}/booking/{uid}/orders/export/meta:
    $ref: 'requests/Events.yaml#/EventOrdersExportMeta'

  /events/v2/{bucket}/booking/{uid}/tickets/all:
    $ref: 'requests/Events.yaml#/EventTicketsAll'

  /events/v2/{bucket}/{resource_type}/{uid}/order/{euid}:
    $ref: 'requests/Events.yaml#/EventOrderSingle'

  /events/v2/{bucket}/{resource_type}/{uid}/order/{euid}/questions:
    $ref: 'requests/Events.yaml#/EventOrderSingleQuestions'

  #
  # Internal
  #

  /internal/v2/{bucket}/membership_type/{uid}/extras:
    $ref: 'requests/Internal.yaml#/MembershipTypeExtras'

  /internal/v2/{bucket}/membership_type/{uid}/extras/additional_field:
    $ref: 'requests/Internal.yaml#/MembershipTypeExtrasAdditionalField'

  /internal/v2/{bucket}/membership_type/{uid}/extras/condition:
    $ref: 'requests/Internal.yaml#/MembershipTypeExtrasCondition'

  /internal/v2/{bucket}/sync/{partner}/{action}/{data_type}:
    $ref: 'requests/Internal.yaml#/PartnerSync'

  /internal/v2/system/build/warehouse/{facet}:
    $ref: 'requests/Internal.yaml#/WarehouseBuild'

  /internal/v2/{bucket}/user_policy/standard:
    $ref: 'requests/Internal.yaml#/CreateUserPolicy'

  /internal/v2/{bucket}/user_policy/{uid}/groups:
    $ref: 'requests/Internal.yaml#/CreateGroupPolicy'

  /internal/v2/{bucket}/user_policy/{uid}/leaders:
    $ref: 'requests/Internal.yaml#/AddPolicyToGroupLeaders'

  /internal/v2/{bucket}/user_policy/{uid}/single:
    $ref: 'requests/Internal.yaml#/CreateSinglePolicy'

  /internal/v2/{bucket}/email_senders:
    get:
      $ref: 'requests/EmailSenders.yaml#/getAllEmailSenders'
    post:
      $ref: 'requests/EmailSenders.yaml#/createEmailSender'

  /internal/v2/{bucket}/email_sender/{uid}:
    get:
      $ref: 'requests/EmailSenders.yaml#/getEmailSenderByUid'
    delete:
      $ref: 'requests/EmailSenders.yaml#/deleteEmailSender'
    put:
      $ref: 'requests/EmailSenders.yaml#/updateEmailSender'

  #
  # Invoices
  #

  /invoices/v2/{bucket}/{invoice_type}/{uid}:
    $ref: 'requests/Invoices.yaml#/InvoiceSingle'

  /invoices/v2/{bucket}/{invoice_type}/{uid}/{signature}:
    $ref: 'requests/Invoices.yaml#/InvoiceSingleWithSignature'



  #
  # Search
  #

  /search/v2/{bucket}:
    $ref: 'requests/Search.yaml#/Search'

  /search/v2/{bucket}/help:
    $ref: 'requests/Search.yaml#/SearchHelp'

  /search/v2/{bucket}/car:
    $ref: 'requests/Search.yaml#/SearchVehicles'

  /search/v2/{bucket}/person:
    $ref: 'requests/Search.yaml#/SearchPerson'

  #
  # Segments
  #
  /segments/v2/{bucket}:
    $ref: 'requests/Segments.yaml#/Segments'

  /segments/v2/{bucket}/all:
    $ref: 'requests/Segments.yaml#/SegmentsAll'

  /segments/v2/{bucket}/create:
    $ref: 'requests/Segments.yaml#/SegmentCreate'

  /segments/v2/{bucket}/find:
    $ref: 'requests/Segments.yaml#/SegmentsFind'

  /segments/v2/{bucket}/trees:
    $ref: 'requests/Segments.yaml#/SegmentTrees'

  /segments/v2/{bucket}/{view_context}:
    $ref: 'requests/Segments.yaml#/SegmentViewContext'

  /segments/v2/{bucket}/segment/{uid}/config:
    $ref: 'requests/Segments.yaml#/SegmentConfig'

  /segments/v2/{bucket}/segment/{uid}/count:
    $ref: 'requests/Segments.yaml#/SegmentCount'

  /segments/v2/{bucket}/segment/{uid}/lookup:
    $ref: 'requests/Segments.yaml#/SegmentLookup'

  /segments/v2/{bucket}/segment/{uid}/all:
    $ref: 'requests/Segments.yaml#/SegmentAll'

  /segments/v2/{bucket}/segment/{uid}/all/excel:
    $ref: 'requests/Segments.yaml#/SegmentAllExcel'

  /segments/v2/{bucket}/segment/{uid}/all/pdf:
    $ref: 'requests/Segments.yaml#/SegmentAllPDF'

  /segments/v2/{bucket}/segment/{uid}/all/xlsx:
    $ref: 'requests/Segments.yaml#/SegmentAllXSLX'

  /segments/v2/{bucket}/segment/{uid}/all/sync_mailchimp:
    $ref: 'requests/Segments.yaml#/SegmentAllSyncMailchimp'

  /segments/v2/{bucket}/segment/{uid}/action/replace:
    $ref: 'requests/Segments.yaml#/SegmentActionReplace'

  /segments/v2/{bucket}/segment/{uid}/action/delete:
    $ref: 'requests/Segments.yaml#/SegmentActionDelete'

  /segments/v2/{bucket}/fieldset:
    $ref: 'requests/Fieldset.yaml#/Fieldset'

  /segments/v2/{bucket}/fieldset/{uid}:
    $ref: 'requests/Fieldset.yaml#/FieldsetSingle'

  #
  # - - - - = - - - - = - - - - = - - - - = - - - - = - - - - = - - - - = - - - - =
  #


  #
  # Self Service / App API - PDFs
  #
  /selfservice/v2/{bucket}/form_response:
    $ref: 'requests/Selfservice.yaml#/FormResponse'

  /selfservice/v2/{bucket}/form_response/{uid}/allocate:
    $ref: 'requests/Selfservice.yaml#/FormResponseAllocate'

  /selfservice-pdf/v2/{bucket}/{resource_type}/{uid}/invoice/{signature}/pdf:
    $ref: 'requests/SelfservicePDF.yaml#/InvoicePDF'

  /selfservice-pdf/v2/{bucket}/giving/taxyear/{startyear}/{endyear}/pdf:
    $ref: 'requests/SelfservicePDF.yaml#/GivingTaxYearPDF'

  /selfservice-pdf/v2/{bucket}/member/{uid}/card:
    $ref: 'requests/SelfservicePDF.yaml#/MemberCardPDF'

  #
  # Self Service / App API - Public / Web
  #

  /public/v2/{bucket}/web:
    $ref: 'requests/SelfservicePublic.yaml#/Web'

