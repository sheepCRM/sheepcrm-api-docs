openapi: 3.0.0
info:
  title: sheepCRM API
  version: 1.0.0
  description: |
    The sheepCRM API is a RESTful API that allows you to access and manipulate data in
    your sheepCRM database. Sheep was built with an API-first approach, so all of the
    functionality you see in the web interface is available via the API.

    The API is designed to be used by developers to build custom integrations and
    applications. It is not designed to be used by end users, although some of the
    endpoints are available to end users via the self-service app.

    Please report any inaccuracies or omissions to support@sheepcrm.com on the
    understanding that this documentation is a work in progress and will be updated
    regularly.
servers:
  - url: https://sls-api.sheepcrm.com
paths:
  /api/v2/{bucket}/{resource_type}/{uid}/avatar:
    get:
      operationId: getAvatar
      summary: Avatar
      description: |
        The avatar for the person or organisation
        If an image has been provided it will be returned as a redirect
        If no image has been provided a placeholder image will be generated
        based on the initials of the name.
      tags:
        - Contact
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: PNG Image
        '302':
          description: Redirect to the image
          headers:
            location:
              description: Location of the remote image
              schema:
                type: string
        '404':
          description: Not found
  /api/v2/{bucket}/{resource_type}/{uid}/display:
    get:
      operationId: getDisplay
      summary: Display
      description: |
        The display name for the record e.g. the persons name or the organisation name
      tags:
        - Contact
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: The display name for the record
          content:
            application/json:
              schema:
                properties:
                  display_value:
                    type: string
                    example: Caroline Smith
        '400':
          description: Bad request, see the error field for details
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2/find/person/{bucket}:
    get:
      summary: Find Person (specific)
      description: |
        check for a specific person contact from within sheepCRM, for general searching use the search endpoint.
        this call has been deprecated in favour of an identical call to the search endpoint /search/v2/{bucket}/person
      deprecated: true
      operationId: checkForPerson
      tags:
        - Search
        - People
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: first_name
          in: query
          required: false
          schema:
            type: string
        - name: last_name
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: date_of_birth
          in: query
          required: false
          schema:
            type: string
        - name: postal_code
          in: query
          required: false
          schema:
            type: string
        - name: take_first_if_multiple
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2{contact_uri}summary:
    get:
      summary: Contact - summary
      description: get a summary of a contact (person or organisation) from their uri
      operationId: getContactSummary
      tags:
        - Contact
      parameters:
        - name: contact_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2{person_uri}communications/detail:
    get:
      summary: Person - communications detail
      description: get the communication details for a person e.g. email, phone, address
      operationId: getPersonCommunications
      tags:
        - Contact
        - People
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2{person_uri}personal/detail:
    get:
      summary: Person - personal detail
      description: get the personal details for a person
      operationId: getPersonPersonal
      tags:
        - Contact
        - People
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2{person_uri}membership/all:
    get:
      summary: Person - membership list
      description: Get the full membership history for a person, current and historic, use the /summary endpoint for a faster summary
      operationId: getPersonMembership
      tags:
        - Contact
        - Membership
        - People
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonMembershipAll'
  /api/v2{bucket}/member/{uid}/:
    get:
      summary: Membership - single
      description: Get a summary of a single membership record (a member record), use the /detail endpoint to get the full details
      operationId: getMemberSummary
      tags:
        - Membership
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2{bucket}/member/{uid}/detail:
    get:
      summary: Membership - single detail
      description: Get a summary of the membership details for a person, use the /all endpoint to get the full details
      operationId: getMemberDetail
      tags:
        - Membership
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2/{bucket}/audit:
    get:
      operationId: audit
      summary: Audit
      description: |
        Pull audit log messages across the whole client for a time period
        Available as standard JSON packet or a list for easier reading
        Note the call is time limited to 20 seconds, so if you have a lot of audit messages
        you may need to reduce the limit and break into multiple calls
      tags:
        - Audit
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 250
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: from
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/datetime'
            default: yesterday
        - name: to
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/datetime'
            default: now
        - name: resource
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: format
          in: query
          required: false
          schema:
            enum:
              - json
              - list
            default: json
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /api/v2/{bucket}/{resource_type}/{uid}/audit:
    get:
      operationId: auditSingle
      summary: Audit - Single Record
      description: |
        Pull audit log messages from a single record
      tags:
        - Audit
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 250
        - name: since_days
          in: query
          required: false
          schema:
            type: integer
            default: 180
      responses:
        '200':
          description: A list of change records for the URI
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diff_list'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /api/v2/{bucket}/{resource_type}/{uid}/provenance:
    get:
      summary: Audit - provenance
      operationId: auditProvenance
      description: |
        Pull the provenance for a specific record
      tags:
        - Audit
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /events/v2/{bucket}:
    get:
      operationId: getEvents
      summary: Events - List
      description: |
        All the events for a client within the past 14 days and next 90
        Aliased as /events/v2/{bucket}/bookings
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            default: 250
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsList'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/bookings/{state}:
    get:
      operationId: getEventsByState
      summary: Events - List by state
      description: All events by their status, note this is a summary packet, call individual events for full details
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: state
          in: path
          required: true
          description: the state or classification
          schema:
            type: string
            enum:
              - all
              - current
              - draft
              - future
              - past
              - running
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            default: 250
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsList'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}:
    get:
      operationId: getEvent
      summary: Events - Single
      description: Full details for an event
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Single Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSingle'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/rebase/tickets:
    put:
      operationId: rebaseEventTickets
      summary: Event - Rebase ticket dates
      description: |
        Rebase the ticket dates for an event.
        Use this after moving the date of an event to propogate the date change to all the tickets
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Single Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRebaseTickets'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/rebase/questions:
    put:
      operationId: rebaseEventQuestions
      summary: Event - Rebase questions
      description: |
        Rebase the questions to ensure that all buyers and attendees have a form response
        Use this when a live event with orders but no questions has questions added
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Single Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRebaseQuestions'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/summary:
    get:
      operationId: getEventSummary
      summary: Events - Single summary
      description: |
        Reduced fields for faster API call and for accounts without access to the full event details
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Single Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSingle'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/attendance:
    get:
      operationId: getEventAttendance
      summary: Event - Attendance
      description: |
        All the attendees for an event
        Aliased as /events/v2/{bucket}/bookings/{uid}/attendance
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: List of attendees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendanceList'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
    put:
      operationId: setEventAttendance
      summary: Event - Attendance
      description: |
        Set the attendance status for a single attendee
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: person_uri
          in: query
          description: The URI of the person
          required: true
          schema:
            $ref: '#/components/schemas/uri'
        - name: status
          in: query
          description: the attendance status
          required: true
          schema:
            type: string
            example: attended
            enum:
              - invited
              - accepted
              - declined
              - attended
              - no-show
      responses:
        '200':
          description: Updated Event Attendance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedEventAttendance'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/attendance/all:
    get:
      operationId: getEventAttendanceAll
      summary: Event - Attendance
      description: |
        All the attendees for an event
        Aliased as /events/v2/{bucket}/bookings/{uid}/attendance
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: List of attendees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendanceList'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/attendance/export:
    get:
      operationId: getEventAttendanceExport
      summary: Event - Attendance Export
      description: |
        All the attendees for an event in spreadsheet format
      tags:
        - Events
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          description: The resource UID, usually a person UID
          schema:
            $ref: '#/components/schemas/uid'
        - name: fieldset
          in: query
          required: false
          description: The fieldsets (lists of fields) to be returned in the export
          schema:
            type: array
            items:
              type: string
              enum:
                - core
                - attendance
                - communications
                - emergency
                - membership
                - profile
                - mailing
              default: core
      responses:
        '200':
          description: Binary XLSX file
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request, see the error field for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
  /events/v2/{bucket}/booking/{uid}/available_tickets:
    get:
      operationId: getEventAvailableTickets
      summary: Event - Available Ticket Types
      description: |
        Get all the ticket types available for a specific event
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: List of available tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAvailableTickets'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/orders:
    get:
      operationId: getEventOrders
      summary: Event - Orders
      description: |
        All the orders for an event for a booking
        Requires `booking.orders` permission
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersList'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/person/{uid}/orders:
    get:
      operationId: getEventOrdersForContact
      summary: Event - Orders for a contact
      description: |
        All the orders for an event for a specific contact
        Requires `contact.orders` permission
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersListForContact'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/booking/{uid}/orders/export:
    get:
      operationId: getEventOrdersExport
      summary: Event - Orders Export
      description: |
        All the orders for an event in spreadsheet format
      tags:
        - Events
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          description: The resource UID, usually a person UID
          schema:
            $ref: '#/components/schemas/uid'
        - name: fieldset
          in: query
          required: false
          description: The fieldsets (lists of fields) to be returned in the export
          schema:
            type: array
            items:
              type: string
              enum:
                - core
                - communications
                - emergency
                - membership
                - order
                - profile
                - mailing
              default: core
      responses:
        '200':
          description: Binary XLSX file
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request, see the error field for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
  /events/v2/{bucket}/booking/{uid}/orders/export/meta:
    get:
      operationId: getEventOrdersExportMeta
      summary: Event - Meta data for the Orders Export
      description: |
        The meta data used to generate the export, useful for debugging a report
      tags:
        - Events
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          description: The resource UID, usually a person UID
          schema:
            $ref: '#/components/schemas/uid'
        - name: fieldset
          in: query
          required: false
          description: The fieldsets (lists of fields) to be returned in the export
          schema:
            type: array
            items:
              type: string
              enum:
                - core
                - communications
                - emergency
                - membership
                - profile
                - mailing
              default: core
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /events/v2/{bucket}/booking/{uid}/tickets/all:
    get:
      operationId: getEventTicketsAll
      summary: Event Tickets
      description: Get all the ticket for a specific event
      tags:
        - Events
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketsList'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/{resource_type}/{uid}/order/{euid}:
    get:
      operationId: getEventOrder
      summary: Event Order - get
      description: |
        A specific order for an event
        Requires `event.order` permission
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          description: The resource UID, usually a person UID
          schema:
            $ref: '#/components/schemas/uid'
        - name: euid
          in: path
          required: true
          description: The event UID
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: A single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
    delete:
      operationId: deleteEventOrder
      summary: Event Order - delete
      description: |
        Deleted a specific, single order for an event
        Requires `event.order` permission
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          description: The resource UID, usually a person UID
          schema:
            $ref: '#/components/schemas/uid'
        - name: euid
          in: path
          required: true
          description: The event UID
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: A single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDeleted'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /events/v2/{bucket}/{resource_type}/{uid}/order/{euid}/questions:
    get:
      operationId: getEventOrderQuestions
      summary: Event Order - questions
      description: |
        The questions and answers submitted for this order
        Requires `event.order` permission
      tags:
        - Events
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          description: The resource UID, usually a person UID
          schema:
            $ref: '#/components/schemas/uid'
        - name: euid
          in: path
          required: true
          description: The event UID
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: A single order questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderQuestions'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /internal/v2/{bucket}/membership_type/{uid}/extras:
    get:
      operationId: getMembershipTypeExtras
      summary: Membership Plan - Extra settings
      description: |
        Get the extra settings for a membership plan
      tags:
        - Membership
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/membership_type/{uid}/extras/additional_field:
    post:
      operationId: updateMembershipTypeExtras
      summary: Membership Plan - Extras - Add additional field
      description: |
        Add an additional user input field to a membership plan
      tags:
        - Membership
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: label
          in: query
          required: true
          schema:
            type: string
            description: The label for the field that will be shown to the user
        - name: field
          in: query
          required: false
          schema:
            type: string
            description: The field name, if not provided the label will be slugified
        - name: description
          in: query
          required: true
          schema:
            type: string
            description: A description of the field, shown to the user
        - name: form_type
          in: query
          required: true
          schema:
            type: string
            description: The type of field
            enum:
              - checkbox
              - date
              - email
              - multi-choice
              - number
              - person_record
              - select
              - tel
              - text
              - textarea
        - name: required
          in: query
          required: false
          schema:
            type: boolean
            description: Is this field required?
        - name: options
          in: query
          required: false
          schema:
            type: array
            description: |
              If the form_type is select, this is the list of options that will be shown to the user
            items:
              type: string
        - name: dob_required
          in: query
          required: false
          schema:
            type: boolean
            description: |
              If the form_type is person_record, is the date of birth required?
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
    delete:
      operationId: deleteMembershipTypeExtras
      summary: Membership Plan - Extras - Remove additional field
      description: |
        Remove an additional user input field from a membership plan
      tags:
        - Membership
        - Internal
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: field
          in: query
          required: true
          schema:
            type: string
            description: The field name to be removed
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/membership_type/{uid}/extras/condition:
    post:
      operationId: updateMembershipTypeExtrasCondition
      summary: Membership Plan - Extras - Add condition
      description: |
        Add a condition to a membership plan
        e.g. Age: Under 18
      tags:
        - Membership
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: key
          in: query
          required: true
          schema:
            type: string
            description: The key element of the condition
        - name: value
          in: query
          required: true
          schema:
            type: string
            description: The value element of the condition
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
    delete:
      operationId: deleteMembershipTypeExtrasCondition
      summary: Membership Plan - Extras - Remove condition
      description: |
        Remove a condition from a membership plan
      tags:
        - Membership
        - Internal
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: key
          in: query
          required: true
          schema:
            type: string
            description: The key element of the condition
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/sync/{partner}/{action}/{data_type}:
    post:
      operationId: partnerSync
      summary: Request Partner Sync
      description: |
        Request a sync with a partner
      tags:
        - Internal
        - Partners
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: partner
          in: path
          required: true
          description: The partner to sync with e.g. mailchimp, gocardless, stripe
          schema:
            type: string
            enum:
              - clio
              - eventbrite
              - gocardless
              - mailchimp
              - mryum
              - stripe
        - name: action
          in: path
          required: true
          description: The action to perform e.g. pull, push
          schema:
            type: string
            enum:
              - pull
              - push
        - name: data_type
          in: path
          required: true
          schema:
            type: string
            enum:
              - contacts
              - consents
              - events
              - payments
          description: The data type to sync e.g. contacts, payments
        - name: since_hours
          in: query
          required: false
          schema:
            type: integer
            description: |
              The number of hours to look back for changes
              e.g. 24 would look back 24 hours for changes
            default: 24
        - name: create_contacts
          in: query
          required: false
          schema:
            type: boolean
            description: |
              If the data_type is contacts, should new contacts be created?
        - name: full
          in: query
          required: false
          schema:
            type: boolean
            description: |
              Where supported a full sync will override the since_hours parameter
      responses:
        '200':
          description: |
            Details of the request.
            The output from the requested sync will appear in the usage reports with a summary of the results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerSync'
        '400':
          description: Bad request, see the error field for details
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/system/build/warehouse/{facet}:
    post:
      operationId: warehouseBuild
      summary: Request a warehouse build
      description: |
        Request a warehouse build
      tags:
        - Internal
        - Partners
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: facet
          in: path
          required: true
          description: The facet to build e.g. contact, membership
          schema:
            type: string
            enum:
              - attendance
              - contact
              - contact_large
              - fundraising
              - membership
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            description: |
              If force is false the build will only run if the there are relevant changes since the last build.
            default: false
        - name: safe_mode
          in: query
          required: false
          schema:
            type: boolean
            description: |
              If safe_mode is true, the build will be executed in a read only way.
            default: false
      responses:
        '200':
          description: |
            Details of the request.
            The output from the requested sync will appear in the usage reports with a summary of the results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseBuild'
        '400':
          description: Bad request, see the error field for details
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/user_policy/standard:
    post:
      operationId: CreateUserPolicy
      summary: Create new composite user policy
      description: |
        Create a composite user policy from a set of standard policies
        For example create a team leader policy `user_type=team-leader`
        and assign a set of policies to it `policies=base,group,team-leader`
      tags:
        - Internal
        - User Policy
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: policies
          in: query
          required: true
          schema:
            type: string
            enum:
              - achievement
              - base
              - base-ro
              - events
              - events-management
              - evidence
              - evidence-read-only
              - form-admin
              - form-response
              - gdpr
              - group
              - group-add-member
              - group-members
              - health-edi
              - membership
              - membership-ro
              - notifications
              - payment
              - person
              - person-ro
              - send-messages
              - session
              - team-leader
              - team-leader-with-applications
              - tasks-and-notes
              - vehicle
              - vehicle-ro
        - name: user_type
          in: query
          required: true
          description: The name of the new user policy
          schema:
            type: string
        - name: name
          in: query
          required: false
          description: Optional name for the policy
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/user_policy/{uid}/groups:
    post:
      operationId: CreateGroupPolicy
      summary: Create group policies
      description: |
        Expand a user policy for all groups
      tags:
        - Internal
        - User Policy
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: tag_filter
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/user_policy/{uid}/leaders:
    post:
      operationId: AddPolicyToGroupLeaders
      summary: Add a policy to all group leaders
      description: |
        Add the given policy to all group user accounts.
        The output is logged in the usage reports; safe mode will output the planned changes without applying them
      tags:
        - Internal
        - User Policy
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: safe_mode
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/user_policy/{uid}/single:
    post:
      operationId: CreateSinglePolicy
      summary: Create a single policies
      description: |
        Create a single user group for a specific user policy
      tags:
        - Internal
        - User Policy
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: tag_filter
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /internal/v2/{bucket}/email_senders:
    get:
      summary: Get all email senders
      description: This API call is currently in alpha. May change without prior notice.
      operationId: getAllEmailSenders
      tags:
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
      responses:
        '200':
          description: A list of all email senders
          content:
            application/json:
              schema:
                type: object
                properties:
                  senders:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailSender'
                  uids:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        email:
                          type: string
    post:
      summary: Create a new email sender
      description: This API call is currently in alpha. May change without prior notice.
      operationId: createEmailSender
      tags:
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
      requestBody:
        description: Email sender creation packet
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSender'
      responses:
        '201':
          description: Email sender successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSender'
        '400':
          description: Email sender already exists
  /internal/v2/{bucket}/email_sender/{uid}:
    get:
      summary: Get email sender by UID
      description: This API call is currently in alpha. May change without prior notice.
      operationId: getEmailSenderByUid
      tags:
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the email sender
      responses:
        '200':
          description: Details of the email sender
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSender'
        '404':
          description: Email sender not found
    delete:
      summary: Delete email sender by UID
      description: This API call is currently in alpha. May change without prior notice.
      operationId: deleteEmailSender
      tags:
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the email sender
      responses:
        '204':
          description: Email sender successfully deleted
        '404':
          description: Email sender not found
    put:
      summary: Update email sender by UID
      description: This API call is currently in alpha. May change without prior notice.
      operationId: updateEmailSender
      tags:
        - Settings
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the email sender
      requestBody:
        description: Email sender update packet
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSender'
      responses:
        '200':
          description: Email sender successfully updated
        '404':
          description: Email sender not found
  /invoices/v2/{bucket}/{invoice_type}/{uid}:
    get:
      operationId: getInvoice
      summary: Invoice - Single
      description: |
        A single master invoice or statement record containing the details of the invoice,
        client config data and payment details
      tags:
        - Finance
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: invoice_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/invoice_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Invoice record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoice'
        '400':
          description: Bad request, see the error field for details
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /invoices/v2/{bucket}/{invoice_type}/{uid}/{signature}:
    get:
      operationId: getInvoiceWithSignature
      summary: Invoice - Single with signature
      description: |
        A single master invoice or statement record containing the details of the invoice,
        client config data and payment details
      tags:
        - Finance
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: invoice_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/invoice_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: signature
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/signature'
      responses:
        '200':
          description: Invoice record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoice'
        '400':
          description: Bad request, see the error field for details
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /search/v2/{bucket}:
    get:
      summary: Search - 'Global'
      description: |
        search across the whole system `/search/v2/{bucket}/?q=John+Smith`
        The global url is an alias: /search/v2/{bucket}/global
      operationId: search
      tags:
        - Search
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: q
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/q'
      responses:
        '200':
          description: A list of resource records matching the search terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultsResponse'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
  /search/v2/{bucket}/help:
    get:
      summary: Search - Help
      description: |
        search within our help documentation
      operationId: search
      tags:
        - Search
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: q
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/q'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: include_text
          in: query
          required: false
          description: |
            include the text of the help articles in the response as text
          schema:
            type: boolean
            default: false
        - name: include_html
          in: query
          required: false
          description: |
            include the text of the help articles in the response as html
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /search/v2/{bucket}/car:
    get:
      summary: Search - Vehicles
      description: |
        search for a specific vehicle by registration number, engine number or identifying number
      operationId: search
      tags:
        - Search
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: registration_number
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/registration_number'
        - name: engine_number
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/engine_number'
        - name: identifying_number
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/identifying_number'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /search/v2/{bucket}/person:
    get:
      summary: Search - People
      description: |
        search for a specific person (this is the same as the /api/v2/find/person/{bucket} endpoint)
      operationId: search
      tags:
        - Search
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: first_name
          in: query
          required: false
          schema:
            type: string
        - name: last_name
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: date_of_birth
          in: query
          required: false
          schema:
            type: string
        - name: postal_code
          in: query
          required: false
          schema:
            type: string
        - name: take_first_if_multiple
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /segments/v2/{bucket}:
    get:
      operationId: segmentsActive
      summary: Segments - All active segments
      description: |
        Segments are groups of records that can be used for browsing or bulk actions.
        A segment can be thought of as a stored query or view in traditional database terms.
        This endpoint returns a list of all the active segments in the system.
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: page_size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page_size'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page'
      responses:
        '200':
          description: |
            The segments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/all:
    get:
      operationId: segments
      summary: Segments - All segments
      description: |
        A list of all the segments in the system including inactive segments.
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: page_size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page_size'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page'
      responses:
        '200':
          description: |
            The segments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/create:
    post:
      operationId: segmentCreate
      summary: Segments - Create a new segment
      description: |
        Segments are groups of records that can be used for browsing or bulk actions.
        A segment can be thought of as a stored query or view in traditional database terms.
        This endpoint creates a new segment.
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: description
          in: query
          required: false
          schema:
            type: string
        - name: segment_type
          in: query
          required: false
          schema:
            type: string
            enum:
              - dynamic
              - static
              - hybrid
              - auxiliary
            default: dynamic
        - name: view_context
          in: query
          required: false
          schema:
            type: string
            enum:
              - comments
              - crm
              - documents
              - events
              - forms
              - giving
              - membership
              - minimal_membership_directory
              - reservations
              - teams
              - vehicles
        - name: parent_segment
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/uri'
        - name: active
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: rules
          in: query
          required: false
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                operator:
                  type: string
                  enum:
                    - and_list
                    - equals
                    - exact
                    - greater_than
                    - greater_than_or_equals
                    - less_than
                    - less_than_or_equals
                    - near
                    - none_of
                    - not_equal_to
                    - or_list
                    - raw
                    - starts_with
                    - starts_with_case_insensitive
                value:
                  oneOf:
                    - type: string
                    - type: integer
                    - type: boolean
        - name: uris_include
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/uri'
        - name: uris_exclude
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/uri'
        - name: resource_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - achievement
              - booking
              - comment
              - contact
              - duplicates
              - form_response
              - group
              - group_member
              - journal
              - membership
              - message
              - organisation
              - page_document
              - payment
              - person
              - reservation
              - sheep_event
              - vehicle
        - name: system_segment
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: tags
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: mailchimp_sync
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: |
            If this is a segment of contacts, syncing will create a matching segment in mailchimp
      responses:
        '201':
          description: |
            The segment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/single_segment'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/find:
    get:
      operationId: segmentsFind
      summary: Segments - Find a segment by name
      description: |
        A list of all the active segments in the system matching the search term.
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: page_size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page_size'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page'
      responses:
        '200':
          description: |
            The segments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/all'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/config:
    get:
      operationId: segmentConfig
      summary: Segment - Config
      description: |
        The config for a segment
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: |
            The segment configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/count:
    get:
      operationId: segmentCount
      summary: Segment - Count
      description: |
        The count and description of the segment
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: |
            The count and description of the segment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/count'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/lookup:
    get:
      operationId: segmentLookup
      summary: Segment - Lookup
      description: |
        Lookup a record within a segment using a simple single search term
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: q
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: |
            A list of segments matching the search terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lookup'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/action/delete:
    post:
      operationId: segmentActionDelete
      summary: Segment - Delete All Records
      description: |
        Creates a new resultset from the segment and deletes all records within it.
        This is an asynchronous operation that returns a notification URI to track progress.
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: rules
          in: query
          required: false
          schema:
            type: object
            description: Additional rules to filter the segment before deletion
        - name: safe_mode
          in: query
          required: false
          schema:
            type: boolean
            description: Whether to run in safe mode (additional validation checks)
        - name: batch_size
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 2500
            description: Number of records to process in each batch
        - name: verbose
          in: query
          required: false
          schema:
            type: boolean
            description: Whether to return detailed progress information
      responses:
        '200':
          description: |
            Successfully initiated bulk delete operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification_uri:
                    $ref: '#/components/schemas/uri'
                    description: URI of the notification that will track delete progress
                  lambda_params:
                    type: object
                    properties:
                      uri:
                        $ref: '#/components/schemas/uri'
                      rules:
                        type: object
                      safe_mode:
                        type: boolean
                      batch_size:
                        type: integer
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error:
                  param: batch_size
                  message: Batch size must be less than 2500
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/all:
    get:
      operationId: segmentAll
      summary: Segment - All records
      description: |
        Segments are groups of records that can be used for browsing or bulk actions. This endpoint returns a list of all the records in the segment.
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: q
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/q'
        - name: page_size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page_size'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/page'
        - name: verbose
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/verbose'
      responses:
        '200':
          description: a list of records with contents depending on segment type
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/all/pdf:
    get:
      operationId: segmentAllPDF
      summary: Segment - PDF export
      description: |
        Export a PDF report based on the data from the segment
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: template
          in: query
          required: true
          schema:
            type: string
        - name: policy
          in: query
          required: false
          schema:
            type: string
        - name: gdpr_bypass
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: gdpr_bypass_reason
          in: query
          required: false
          schema:
            type: string
        - name: debug
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: |
            A 'receipt' for the PDF report request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestReport'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/all/xlsx:
    get:
      operationId: segmentAllXSLX
      summary: Segment - XLSX export
      description: |
        Export a XLSX report based on the data from the segment
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: template
          in: query
          required: false
          schema:
            type: string
        - name: policy
          in: query
          required: false
          schema:
            type: string
        - name: gdpr_bypass
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: gdpr_bypass_reason
          in: query
          required: false
          schema:
            type: string
        - name: debug
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: |
            A 'receipt' for the XLSX report request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestReport'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/segment/{uid}/all/sync_mailchimp:
    get:
      operationId: segmentAllSyncMailchimp
      summary: Segment - Sync Mailchimp
      description: |
        Sync the segment with Mailchimp
      tags:
        - Segments
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: segment_name
          in: query
          required: false
          schema:
            type: string
            default: The name of the segment
        - name: mailchimp_batch_size
          in: query
          required: false
          schema:
            type: integer
            default: 500
        - name: verbose
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: |
            A 'receipt' for the sync request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestSync'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authentication error
  /segments/v2/{bucket}/fieldset:
    get:
      operationId: segmentsFieldset
      summary: Fieldset - list of fields
      description: |
        A list of fields that can be used to create a segment, report or export
      tags:
        - Segments
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          description: The bucket to get the fieldset for
          schema:
            type: string
        - name: resource
          in: query
          description: The resource to get the applicable fieldset
          required: false
          schema:
            type: string
      responses:
        '200':
          description: |
            A list of fieldsets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fieldsetList'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      operationId: segmentsFieldsetCreate
      summary: Fieldset - create a fieldset
      description: |
        Create a fieldset that can be used to create a segment, report or export
      tags:
        - Segments
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          description: The bucket to create the fieldset for
          schema:
            type: string
        - name: name
          in: query
          required: false
          description: the name of the fieldset
          schema:
            type: string
            default: Field list based on {resource_type}
        - name: description
          in: query
          required: false
          description: the description of the fieldset
          schema:
            type: string
            default: Field list based on {resource_type}
        - name: fields
          in: query
          required: false
          description: the fields of the fieldset
          schema:
            type: array
            items:
              type: string
            default:
              - field_name
        - name: resource
          in: query
          required: false
          description: used to generate the fieldset from all the fields on a resource
          schema:
            type: string
        - name: applicable_resources
          in: query
          required: false
          description: the applicable resources of the fieldset
          schema:
            type: array
            items:
              type: string
            default:
              - resource_type
      responses:
        '201':
          description: |
            A single fieldset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fieldsetSingle'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      operationId: segmentsFieldsetDelete
      summary: Fieldset - delete
      description: |
        Delete an existing fieldset
      tags:
        - Segments
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          description: The bucket to delete the fieldset for
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: The uid of the fieldset to delete
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /segments/v2/{bucket}/fieldset/{uid}:
    get:
      operationId: segmentsFieldsetSingle
      summary: Fieldset - single fieldset
      description: |
        A single fieldset that can be used to create a segment, report or export
      tags:
        - Segments
        - Export
      parameters:
        - name: bucket
          in: path
          required: true
          description: The bucket to get the fieldset for
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: The uid of the fieldset to get
          schema:
            type: string
      responses:
        '200':
          description: |
            A single fieldset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fieldsetSingle'
        '400':
          description: a standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /selfservice/v2/{bucket}/form_response:
    post:
      operationId: formResponse
      summary: App - Request empty form responses
      description: |
        This endpoint returns a list of empty form responses for the given form.
      tags:
        - App
        - Forms
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: form_ref
          in: query
          required: true
          schema:
            type: string
            $ref: '#/components/schemas/uri'
        - name: quantity
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /selfservice/v2/{bucket}/form_response/{uid}/allocate:
    put:
      operationId: formResponseAllocate
      summary: Allocate a form response to a contact
      description: |
        Set or change the contact for the form response
      tags:
        - App
        - Forms
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: contact_ref
          in: query
          required: true
          schema:
            type: string
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
    delete:
      operationId: formResponseDeAllocate
      summary: Delete the contact on a form response
      description: |
        Delete the contact for the form response leaving it empty
      tags:
        - App
        - Forms
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Successful operation
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
        '500':
          description: An error occurred within sheepCRM, please report to support@sheepcrm.com
  /selfservice-pdf/v2/{bucket}/{resource_type}/{uid}/invoice/{signature}/pdf:
    get:
      operationId: invoicePDF
      summary: App - Invoice PDF
      description: |
        A printable PDF of an invoice. The template parameter is optional and defaults to sheep-invoice-a4.
        The standard template uses the logo, address and other settings provided for the client.
        Contact the support team if you would like a custom template.
      tags:
        - App
        - PDF
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: resource_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/resource_type'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
        - name: signature
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/signature'
        - name: template
          in: query
          required: false
          schema:
            type: string
            default: sheep-invoice-a4
      responses:
        '200':
          description: Binary PDF file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
  /selfservice-pdf/v2/{bucket}/giving/taxyear/{startyear}/{endyear}/pdf:
    get:
      operationId: givingTaxYearPDF
      summary: App - Giving PDF
      description: A printable PDF of a giving statement for a tax year
      tags:
        - App
        - PDF
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: start_year
          in: path
          required: true
          schema:
            type: number
            example: 2022
        - name: end_year
          in: path
          required: true
          schema:
            type: number
            example: 2023
      responses:
        '200':
          description: Binary PDF file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
  /selfservice-pdf/v2/{bucket}/member/{uid}/card:
    get:
      operationId: memberCardPDF
      summary: App - Membership card PDF
      description: A printable PDF Member card
      tags:
        - App
        - PDF
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: uid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uid'
      responses:
        '200':
          description: Binary PDF file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: A standard error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
        '403':
          description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.
        '404':
          description: Not found
  /public/v2/{bucket}/web:
    get:
      operationId: web
      summary: App - Public Pages
      description: |
        All pages (and index pages) are accessed through a single endpoint.
        The `path` is a required parameter and the response will be a page config block
        and zero or more resources.
        User credentials are optional but may be required if the page is not public or is only for members.
      tags:
        - App
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: path
          in: query
          description: |
            The URL path (after the domain name).
            All paths should end with a trailing slash.
          schema:
            type: string
            example: archive-introduction/
        - name: user_query
          in: query
          description: |
            A dictionary of query terms which are merged with the base query for the index page (if present).
          schema:
            $ref: '#/components/schemas/page_user_query'
      responses:
        '200':
          description: Successful operation - a page response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses-page'
        '400':
          description: a standard error message
        '401':
          description: Authentication error
components:
  schemas:
    bucket:
      type: string
      example: example
      description: The bucket (client) name
    resource_type:
      type: string
      example: person
      description: The type of resource, usually the second element in the URI e.g person, organisation, member, payment
    uid:
      type: string
      example: 6305f074683e800f3abe809e
      description: |
        Usually the final element in the URI, an alphanumeric unique identifier
    error:
      type: object
      properties:
        description:
          type: string
          description: A human readable description of the error
        error:
          type: string
          description: A concise error message
        type:
          type: string
          description: A machine readable error type
    uri:
      type: string
      example: /example/person/6305f074683e800f3abe809e/
      description: |
        URIs are unique identifiers for resources in the system,
        they are structured as follows `/bucket/resource_type/uid/`
    PersonMembershipAll:
      type: object
      properties:
        contact_uri:
          type: string
        count:
          type: number
          description: The number of memberships for this contact
        memberships:
          type: array
          description: A list of member records for this contact
          items:
            type: object
            properties:
              admin_contact:
                type: string
                description: The URI of the contact that is the admin for this membership. Admin contacts can manage the membership and are the primary contact for membership communication.
              advise_lapse:
                type: boolean
              amount:
                type: number
              auto_renew:
                type: boolean
              billing_contact:
                type: string
                description: The URI of the billing contact for this membership.
              cancellation_date:
                type: string
              created:
                type: string
              currency:
                type: string
              display_value:
                type: string
              end_date:
                type: string
              externally_managed:
                type: boolean
              gc_subscription_id: {}
              gift_aid:
                type: boolean
              has_renewed:
                type: boolean
              lapse_reason:
                type: string
              last_updated:
                type: string
              linked_members:
                type: array
                items:
                  type: string
              max_linked_members:
                type: number
              member:
                type: string
                description: The URI of the contact that is the primary member
              membership_number:
                type: string
              membership_plan_type:
                type: string
              membership_record_status:
                type: string
              membership_type:
                type: string
                description: The URI of the membership plan for this membership
              mute_communications:
                type: boolean
              next_membership_type:
                type: string
                description: The URI of the membership plan that this member should renew onto.
              next_payment_plan:
                type: string
                description: The URI of the payment plan that this member should use for payment when they renew.
              paid:
                type: boolean
              payment_date: {}
              payment_method:
                type: string
              payment_plan:
                type: string
              payment_reference: {}
              period:
                type: string
              record_state:
                type: string
              start_date:
                type: string
              stripe_subscription_id: {}
              tags:
                type: array
                items:
                  type: string
              tax:
                type: string
              uid:
                type: string
              uri:
                type: string
                description: a membership uri will always be in the format `/bucket/member/uid/` with the word 'member' in the middle
              user_interface:
                type: object
                properties:
                  can_create_member:
                    type: boolean
                  can_delete_member:
                    type: boolean
                  can_edit_member:
                    type: boolean
                  can_restore_member:
                    type: boolean
                  policy_name:
                    type: string
              xero_account_code: {}
    datetime:
      type: string
      example: '2023-09-05T11:27:06.437000'
      description: A date in the format YYYY-MM-DDTHH:MM:SS.mmmmmm
    diff:
      type: object
      properties:
        field:
          type: string
        prev:
          type: string
          description: The previous value
        value:
          type: string
          description: The new value
        verb:
          type: string
          description: The type of change
          enum:
            - change
            - add
            - drop
    diffs:
      type: object
      properties:
        date:
          $ref: '#/components/schemas/datetime'
        message:
          type: string
          description: human readable diff
        uri:
          $ref: '#/components/schemas/uri'
        user:
          $ref: '#/components/schemas/uri'
        revertable:
          type: boolean
        resource:
          $ref: '#/components/schemas/resource_type'
        clean_diff:
          type: array
          items:
            $ref: '#/components/schemas/diff'
    diff_list:
      description: List of changes to the record
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/diffs'
        count:
          type: integer
          description: The number of changes
        uri:
          $ref: '#/components/schemas/uri'
        related_uris:
          type: array
          items:
            $ref: '#/components/schemas/uri'
    date:
      type: string
      example: '2020-01-01'
      description: A date in the format YYYY-MM-DD
    time:
      type: string
      example: '11:27'
      description: A date in the format HH:MM
    url:
      type: string
      example: https://s3-eu-west-1.amazonaws.com/sheepcrm/example/vehicle/63ceaeacd403a64149a3de0c/photo/mycar.jpg
      description: |
        A fully qualified URL including the protocol e.g. https
    EventSingle:
      properties:
        attendee_questions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
        auto_forms:
          type: boolean
        balance:
          type: number
          format: float
        bar_notes:
          type: string
        bar_requested:
          type: boolean
        bar_type:
          type: string
        base_record_last_updated:
          $ref: '#/components/schemas/datetime'
        billing_contact:
          type: string
        bookable_refs:
          type: array
          items:
            $ref: '#/components/schemas/uri'
        booking_contact:
          type: string
        booking_organisation:
          type: string
        booking_reference:
          type: string
        booking_type:
          type: string
        buyer_handling:
          type: string
        cancelled:
          type: boolean
        capacity:
          type: number
        category:
          type: string
        catering:
          type: boolean
        catering_by:
          type: string
        catering_notes:
          type: string
        catering_support:
          type: boolean
        checklist:
          type: array
          items:
            type: string
        conferencing_instructions:
          type: string
        conferencing_url:
          type: string
        connection_type_counter:
          type: object
          additionalProperties:
            type: number
        contacts:
          type: array
          items:
            type: string
        controller:
          type: string
        created:
          $ref: '#/components/schemas/datetime'
        date_range:
          type: string
        dates_to_be_confirmed:
          type: boolean
        delivered_by:
          type: string
        delivered_by_background:
          type: string
        delivered_by_photo:
          type: string
        description:
          type: string
        dietary_requirements:
          type: string
        display_value:
          type: string
        end_date:
          $ref: '#/components/schemas/date'
        end_datetime:
          $ref: '#/components/schemas/datetime'
        end_time:
          $ref: '#/components/schemas/time'
        enquiry:
          type: boolean
        enquiry_date:
          $ref: '#/components/schemas/date'
        est_numbers:
          type: number
        event_type:
          type: string
        eventbrite_id:
          type: string
        eventbrite_last_sync:
          $ref: '#/components/schemas/datetime'
        external_boxoffice_link:
          $ref: '#/components/schemas/url'
        external_image:
          $ref: '#/components/schemas/url'
        external_web_link:
          $ref: '#/components/schemas/url'
        extras:
          type: string
        featured:
          type: boolean
        files:
          type: array
          items:
            type: string
        filming:
          type: boolean
        formatted_connections:
          type: array
          items:
            type: string
        formatted_title:
          type: string
        group:
          type: array
          items:
            type: object
            properties:
              display_value:
                type: string
              ref:
                $ref: '#/components/schemas/uri'
        group_member_connections:
          type: array
          items:
            type: string
        guest_support:
          type: boolean
        has_available_tickets:
          type: boolean
        has_bar_requested:
          type: boolean
        has_cancelled:
          type: boolean
        has_catering:
          type: boolean
        has_catering_support:
          type: boolean
        has_enquiry:
          type: boolean
        has_filming:
          type: boolean
        has_guest_support:
          type: boolean
        has_latecomers_allowed:
          type: boolean
        has_media_support:
          type: boolean
        has_music:
          type: boolean
        has_photography:
          type: boolean
        has_staffed_event:
          type: boolean
        has_ticketed_event:
          type: boolean
        hide_banners:
          type: boolean
        hide_from_self_service:
          type: boolean
        important_information_for_attendees:
          type: string
        invoice_count:
          type: number
        invoice_currency:
          type: string
        invoice_items:
          type: number
        invoice_status:
          type: string
        invoice_total:
          type: number
        invoice_total_inc_tax:
          type: number
        invoices:
          type: array
          items:
            type: string
        is_sold_out:
          type: boolean
        last_updated:
          $ref: '#/components/schemas/datetime'
        last_venue_update:
          $ref: '#/components/schemas/datetime'
        latecomers_allowed:
          type: boolean
        latecomers_policy:
          type: string
        layout_notes:
          type: string
        layout_requirements:
          type: string
        legacy_uid:
          type: string
        length:
          type: string
        length_display:
          type: string
        length_hours:
          type: number
        lifecycle_emails:
          type: boolean
        linked_member_connections:
          type: array
          items:
            type: string
        location:
          type: string
        location_address_string:
          type: string
        location_attendee_notes:
          type: string
        location_country:
          type: string
        location_postal_code:
          type: string
        map_zoom_level:
          type: number
        maximum_ticket_price:
          type: number
        media_notes:
          type: string
        media_support:
          type: boolean
        member_only_event:
          type: boolean
        menu_notes:
          type: string
        minimum_ticket_price:
          type: number
        moodle_id:
          type: string
        multi_day:
          type: boolean
        music:
          type: boolean
        next_activity_date:
          $ref: '#/components/schemas/datetime'
        notes:
          type: string
        order_questions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
        pay_later:
          type: boolean
        photo:
          $ref: '#/components/schemas/url'
        photography:
          type: boolean
        playlist:
          type: string
        post_event_information:
          type: string
        post_event_url:
          type: string
        progress:
          type: number
        proposed_dates:
          type: array
          items:
            type: string
        resource_type:
          type: string
        secondary_photos:
          type: array
          items:
            $ref: '#/components/schemas/url'
        self_service_attendee_details:
          type: string
        series_id:
          type: string
        setup_notes:
          type: string
        show_map:
          type: boolean
        slug:
          type: string
        staffed_event:
          type: boolean
        start_date:
          $ref: '#/components/schemas/date'
        start_datetime:
          $ref: '#/components/schemas/datetime'
        start_sales_date:
          $ref: '#/components/schemas/date'
        start_time:
          $ref: '#/components/schemas/time'
        status:
          type: string
        subcategory:
          type: string
        tags:
          type: array
          items:
            type: string
        takedown_notes:
          type: string
        ticket_buyer_form_per_contact:
          type: array
          items:
            type: object
        ticket_buyer_form_per_order:
          type: array
          items:
            type: object
        ticket_choices:
          type: array
          items:
            type: object
        ticket_stock_control:
          type: boolean
        ticket_type_income:
          type: object
          additionalProperties:
            type: number
        ticket_types:
          type: object
          additionalProperties:
            type: object
        ticketed_event:
          type: boolean
        timing_notes:
          type: string
        title:
          type: string
        total_stock:
          type: number
        total_stock_allocated:
          type: number
        total_stock_available:
          type: number
        uid:
          $ref: '#/components/schemas/uid'
        uri:
          $ref: '#/components/schemas/uri'
        use_access_code:
          type: boolean
        user_interface:
          type: object
          properties:
            can_cancel_event:
              type: boolean
            can_change_app_visibility:
              type: boolean
            can_change_dates:
              type: boolean
            can_control_stock:
              type: boolean
            can_delete:
              type: boolean
            can_disable_ticket_stock_control:
              type: boolean
            can_duplicate:
              type: boolean
            can_edit_booking_details:
              type: boolean
            can_edit_booking_group:
              type: boolean
            can_edit_images:
              type: boolean
            can_edit_location:
              type: boolean
            can_edit_questions:
              type: boolean
            can_enable_ticket_stock_control:
              type: boolean
            can_view_in_app:
              type: boolean
            show_eventbrite_link:
              type: boolean
        venue_handling:
          type: string
        venue_refs:
          type: array
          items:
            $ref: '#/components/schemas/uri'
        venues:
          type: array
          items:
            type: string
        waitlist_available:
          type: boolean
        website:
          $ref: '#/components/schemas/url'
        xero_account_code:
          type: string
    EventsList:
      properties:
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/EventSingle'
    EventRebaseTickets:
      properties:
        ticket_changes:
          type: array
          items:
            type: object
            properties:
              uri:
                $ref: '#/components/schemas/uri'
              old_date:
                $ref: '#/components/schemas/date'
              new_date:
                $ref: '#/components/schemas/date'
        unchanged_tickets:
          type: integer
    EventRebaseQuestions:
      properties:
        changes:
          type: array
          items:
            type: object
            properties:
              uri:
                $ref: '#/components/schemas/uri'
        unchanged:
          type: integer
    email:
      type: string
      example: bob@example.com
    EventAttendanceList:
      properties:
        booking:
          $ref: '#/components/schemas/EventSingle'
        booking_uri:
          $ref: '#/components/schemas/uri'
        sessions:
          type: array
          items:
            type: object
            properties:
              attendee_email:
                $ref: '#/components/schemas/email'
              attendee_name:
                type: string
              created:
                $ref: '#/components/schemas/datetime'
              display_value:
                type: string
              guest:
                type: boolean
              guest_ref:
                $ref: '#/components/schemas/uri'
              last_updated:
                $ref: '#/components/schemas/datetime'
              person_ref:
                $ref: '#/components/schemas/uri'
              record_state:
                type: string
              status:
                type: string
              ticket:
                type: string
              ticket_ref:
                $ref: '#/components/schemas/uri'
              uid:
                $ref: '#/components/schemas/uid'
              uri:
                $ref: '#/components/schemas/uri'
    display_value:
      type: string
      description: The human readable value of the record the URI points to
    expanded_uri:
      type: object
      properties:
        display_value:
          $ref: '#/components/schemas/display_value'
        ref:
          $ref: '#/components/schemas/uri'
    legacy_uid:
      type: string
      example: 1234567890
      description: |
        A third part or external unique identifier, sometimes from a legacy system.
        Can also be a psuedo-random string to enforce uniqueness.
    UpdatedEventAttendance:
      properties:
        attendance:
          type: array
          items:
            type: object
            properties:
              attendance:
                type: object
                properties:
                  attendee_email:
                    $ref: '#/components/schemas/email'
                  attendee_name:
                    type: string
                  booking_ref:
                    $ref: '#/components/schemas/expanded_uri'
                  guest:
                    type: boolean
                  legacy_uid:
                    $ref: '#/components/schemas/legacy_uid'
                  person_ref:
                    $ref: '#/components/schemas/expanded_uri'
                  status:
                    type: string
                  ticket_ref:
                    $ref: '#/components/schemas/uri'
              uri:
                type: string
        booking_ref:
          $ref: '#/components/schemas/uri'
        person_ref:
          $ref: '#/components/schemas/uri'
        status:
          type: string
    number_as_string:
      type: string
      example: '123.45'
      description: A decimal number stored as a string
    currency:
      type: string
      example: gbp
      description: A three letter currency code (lower case)
      enum:
        - gbp
        - usd
        - eur
        - aed
        - aud
        - bbd
        - bgn
        - bhd
        - bsd
        - bwp
        - cad
        - chf
        - cny
        - czk
        - dkk
        - fjd
        - ghs
        - hkd
        - hrk
        - huf
        - idr
        - ils
        - inr
        - jmd
        - jod
        - jpy
        - kes
        - kwd
        - kyd
        - lkr
        - lsl
        - mad
        - mur
        - mwk
        - mxn
        - myr
        - nad
        - ngn
        - nok
        - nzd
        - omr
        - php
        - pkr
        - pln
        - qar
        - ron
        - rsd
        - rub
        - sek
        - sgd
        - thb
        - tnd
        - try
        - ttd
        - twd
        - ugx
        - zar
    sort_order:
      type: number
      example: 1
      description: A number that can be used to sort a list of items, low is first, high is last
    EventAvailableTickets:
      properties:
        available_tickets:
          type: array
          items:
            type: object
            properties:
              access_code:
                type: string
              allocated:
                type: number
              amount:
                $ref: '#/components/schemas/number_as_string'
              available:
                type: number
              available_from_date:
                type: object
                properties: {}
              currency:
                $ref: '#/components/schemas/currency'
              description:
                type: string
              member_only:
                type: boolean
              name:
                type: string
              number_of_attendees_per_ticket:
                $ref: '#/components/schemas/number_as_string'
              pricing:
                type: string
                deprecated: true
              reserved:
                type: number
              single_use:
                type: boolean
              sort_order:
                $ref: '#/components/schemas/sort_order'
              tags:
                type: array
                items:
                  type: string
              tax:
                type: string
              total:
                type: number
              uri:
                $ref: '#/components/schemas/uri'
              xero_account_code:
                type: string
    OrderTotal:
      properties:
        fully_paid:
          type: boolean
        outstanding:
          type: number
          description: The amount remaining to be paid on the order
        paid:
          type: number
          description: The amount already paid on the order
        processing_fees:
          type: number
          description: The total amount of the processing fees
        total:
          type: number
          description: The total amount of the order
    Order:
      properties:
        attendee_count:
          type: number
        buyer:
          $ref: '#/components/schemas/uri'
        buyer_index_name:
          type: string
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/currency'
        order_date:
          $ref: '#/components/schemas/datetime'
        order_total:
          type: object
          description: 'NOTE: The currencies of each payment form the keys within the order_total'
          properties:
            gbp:
              $ref: '#/components/schemas/OrderTotal'
              type: object
            eur:
              $ref: '#/components/schemas/OrderTotal'
              type: object
            usd:
              $ref: '#/components/schemas/OrderTotal'
              type: object
        tickets:
          type: number
        tickets_as_string:
          type: string
    OrdersList:
      properties:
        booking:
          $ref: '#/components/schemas/EventSingle'
        booking_uri:
          $ref: '#/components/schemas/uri'
        buyers:
          type: object
          properties:
            /example/person/12dd1259/:
              $ref: '#/components/schemas/Order'
        number_of_orders:
          type: number
        number_of_unpaid_orders:
          type: number
    OrdersListForContact:
      properties:
        contact_uri:
          $ref: '#/components/schemas/uri'
        orders:
          type: array
          items:
            type: object
            properties:
              booking_display:
                type: string
              booking_uri:
                $ref: '#/components/schemas/uri'
    TicketExpanded:
      properties:
        activity:
          type: string
        amount:
          type: number
        booking:
          $ref: '#/components/schemas/uri'
        booking_display:
          type: string
        buyer:
          $ref: '#/components/schemas/uri'
        buyer_display:
          type: string
        created:
          $ref: '#/components/schemas/datetime'
        currency:
          $ref: '#/components/schemas/currency'
        date:
          $ref: '#/components/schemas/datetime'
        display_value:
          type: string
        formatted_title:
          type: string
        last_updated:
          $ref: '#/components/schemas/datetime'
        legacy_uid:
          type: string
        number_of_attendees:
          type: number
        purchase_date:
          $ref: '#/components/schemas/datetime'
        quantity:
          type: number
        record_state:
          type: string
        reference: {}
        tax_rate:
          type: number
        ticket_id:
          type: string
        ticket_type:
          $ref: '#/components/schemas/uri'
        ticket_type_display:
          type: string
        uid:
          $ref: '#/components/schemas/uid'
        uri:
          $ref: '#/components/schemas/uri'
        venue:
          type: string
        xero_account_code:
          type: string
    TicketsList:
      properties:
        booking:
          $ref: '#/components/schemas/EventSingle'
        booking_uri:
          $ref: '#/components/schemas/uri'
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketExpanded'
    OrderDeleted:
      properties:
        booking_uri:
          $ref: '#/components/schemas/uri'
        contact_uri:
          $ref: '#/components/schemas/uri'
        deleted:
          type: array
          description: The list of deleted tickets
          items:
            $ref: '#/components/schemas/uri'
        errors:
          type: array
          description: The list of errors
          items:
            type: string
        returned_stock:
          type: array
          description: The list of returned stock uris
          items:
            $ref: '#/components/schemas/uri'
    FormQuestion:
      properties:
        answer:
          type: string
        choices_url:
          $ref: '#/components/schemas/url'
        core_field:
          type: boolean
        core_field_update_policy:
          type: string
          enum:
            - overwrite
            - underwrite
        disabled:
          type: boolean
        field:
          type: string
          enum:
            - boolean
            - boolean-simple
            - boolean-switch
            - choice
            - choice-from-url
            - choice-from-sheep-segment
            - date
            - divider
            - email
            - extra-large-text
            - file
            - helper-text
            - image
            - profile_photo
            - large-text
            - multi-choice
            - multi-choice-checkbox
            - multi-choice-checkbox-from-sheep-segment
            - multi-choice-from-sheep-segment
            - multi-choice-from-url
            - multi-file
            - number
            - telephone
            - text
            - text-list
            - time
        formType:
          type: string
        form_type:
          type: string
        fully_qualified_field:
          type: string
        helper_text:
          type: string
        label:
          type: string
        marks_available:
          type: number
        max_word_limit:
          type: number
        min_word_limit:
          type: number
        options:
          type: array
          items:
            type: string
        original_field:
          type: string
        question_uri:
          $ref: '#/components/schemas/uri'
        required:
          type: boolean
        visibility:
          type: string
          enum:
            - applicant
            - internal_only
            - feedback
    FormSection:
      properties:
        feedback_on:
          type: boolean
        internal_comments_on:
          type: boolean
        intro:
          type: string
        marks:
          type: number
        questions:
          type: array
          description: The questions in the form section
          items:
            $ref: '#/components/schemas/FormQuestion'
        ref:
          type: string
        scoring:
          type: boolean
        section_uri:
          $ref: '#/components/schemas/uri'
        subtitle:
          type: string
        title:
          type: string
    SimpleQuestion:
      properties:
        answer:
          type: string
        form_type:
          type: string
        marks_available:
          type: number
        question:
          type: string
        required:
          type: boolean
        uri:
          $ref: '#/components/schemas/uri'
    FormResponse:
      properties:
        flat:
          type: object
          description: The flat representation of the form response
        sections:
          type: array
          description: The sections of the form response
          items:
            $ref: '#/components/schemas/FormSection'
        simple:
          type: array
          description: The simple representation of the form response
          items:
            $ref: '#/components/schemas/SimpleQuestion'
    OrderFormResponse:
      properties:
        contact_display_value:
          type: string
        contact_uri:
          $ref: '#/components/schemas/uri'
        response:
          type: object
          $ref: '#/components/schemas/FormResponse'
        role:
          type: string
          enum:
            - attendee
            - buyer
        uri:
          $ref: '#/components/schemas/uri'
    OrderQuestions:
      properties:
        booking_uri:
          $ref: '#/components/schemas/uri'
        booking_display_value:
          type: string
        buyer_uri:
          $ref: '#/components/schemas/uri'
        responses:
          type: array
          description: The list of questions and answers
          items:
            $ref: '#/components/schemas/OrderFormResponse'
    PartnerSync:
      properties:
        action:
          type: string
        data_type:
          type: string
        function_name:
          type: string
        params:
          type: object
          description: |
            The parameters to pass to the lambda function which will execute your request
          properties:
            bucket:
              type: string
            lambda_prefix:
              type: string
            safe_mode:
              type: boolean
            since_hours:
              type: integer
              description: The number of hours to look back for changes
        partner:
          type: string
        status:
          type: string
          description: OK if the request was successful
    WarehouseBuild:
      properties:
        function_name:
          type: string
        message:
          type: string
        params:
          type: object
          description: |
            The parameters to pass to the lambda function which will execute your request
          properties:
            bucket:
              type: string
            force:
              type: boolean
            safe_mode:
              type: boolean
        status:
          type: string
          description: OK if the request was successful
    EmailSender:
      type: object
      required:
        - email
        - display_name
        - products
        - allow_for_all_users
        - specific_user_list
      properties:
        uid:
          type: string
          description: Unique identifier for the email sender
        email:
          type: string
          description: Email address of the sender
        display_name:
          type: string
          description: Display name of the email sender
        products:
          type: array
          description: List of products the sender is associated with
          items:
            type: string
        allow_for_all_users:
          type: boolean
          description: Whether the email sender is allowed for all users
        specific_user_list:
          type: array
          description: List of specific user URIs
          items:
            type: string
    invoice_type:
      type: string
      example: order
      enum:
        - order
        - invoice
        - membership
      description: The type of invoice
    address:
      type: array
      description: a list of address lines
      example:
        - 1 High Street
        - Oxford
        - Oxfordshire
        - OX1 1AA
      items:
        type: string
    locality:
      type: string
      example: Oxford
      description: A locality, usually a town or city
    postal_code:
      type: string
      example: SW1A 1AA
      description: A postal code or ZIP code
    region:
      type: string
      example: Oxfordshire
      description: A region, usually a county or state
    telephone:
      type: string
      example: 01234 567890
      description: A telephone number, country code prefix is optional
    buyer:
      type: object
      properties:
        buyer_address:
          $ref: '#/components/schemas/address'
        buyer_country:
          type: string
        buyer_email:
          $ref: '#/components/schemas/email'
        buyer_locality:
          $ref: '#/components/schemas/locality'
        buyer_name:
          type: string
        buyer_postal_code:
          $ref: '#/components/schemas/postal_code'
        buyer_region:
          $ref: '#/components/schemas/region'
        buyer_telephone:
          $ref: '#/components/schemas/telephone'
        buyer_vat_number:
          type: string
    tax_category:
      type: string
      example: standard
      enum:
        - standard
        - reduced
        - zero
        - exempt
        - 'off'
      description: The tax category for the line item
    line_item:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/currency'
        name:
          type: string
          description: the name of the item being purchased
        price:
          type: number
          description: the price of a single item in the currency specified
        quantity:
          type: number
        ref:
          $ref: '#/components/schemas/uri'
        tax:
          $ref: '#/components/schemas/tax_category'
        tax_rate:
          type: number
          description: the tax rate as a float (e.g. 0.2 for 20%)
        tax_total:
          type: number
        tax_total_float:
          type: number
        total:
          type: number
        total_before_tax:
          type: number
        total_float:
          type: number
        xero_account_code:
          type: string
    link:
      type: object
      properties:
        filename:
          type: string
        href:
          $ref: '#/components/schemas/url'
        prompt:
          type: string
        rel:
          type: string
    signature:
      type: string
      example: 6305f
      description: An alphanumeric string that is used to verify the request
    invoice:
      type: object
      properties:
        billing_contact:
          $ref: '#/components/schemas/uri'
        buyer:
          $ref: '#/components/schemas/buyer'
        buyer_ref:
          $ref: '#/components/schemas/uri'
        config:
          type: object
          properties:
            address:
              $ref: '#/components/schemas/address'
            contact_details:
              type: string
            contact_email:
              type: string
            contact_phone:
              type: string
            default_currency:
              $ref: '#/components/schemas/currency'
            flock_name:
              type: string
            logo_url:
              $ref: '#/components/schemas/url'
            payment_detail_notes:
              type: string
            payment_details:
              type: string
            postal_code:
              type: string
            purchase_order_string:
              type: string
            tax_name:
              type: string
            template:
              type: string
            vat_number:
              type: string
        context:
          $ref: '#/components/schemas/uri'
        currency:
          type: string
          deprecated: true
        date:
          $ref: '#/components/schemas/date'
        due:
          type: number
        for_the_attention_of:
          type: string
        id:
          type: string
        invoice_currency:
          $ref: '#/components/schemas/currency'
        invoice_uri:
          $ref: '#/components/schemas/uri'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/line_item'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        number_of_payments:
          type: number
        payment_reference_uri:
          $ref: '#/components/schemas/uri'
        purchase_order_no:
          type: string
        signature:
          $ref: '#/components/schemas/signature'
        signed_invoice_uri:
          $ref: '#/components/schemas/uri'
        status:
          type: string
        tax_total:
          type: number
        total:
          type: number
        total_before_tax:
          type: number
        total_paid:
          type: number
        total_scheduled:
          type: number
        total_tax:
          type: number
        xero_invoice_ref:
          $ref: '#/components/schemas/url'
        xero_ready:
          type: boolean
    q:
      type: string
      example: john smith
    SearchResultsResponse:
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              display_value:
                type: string
                example: John Smith
              id:
                type: string
                example: /example/person/6305f074683e800f3abe809e/
              primary_email:
                type: string
                example: john@smith.example.com
              primary_telephone:
                type: string
                example: +44 1234 56789
              resource:
                type: string
                example: person
    registration_number:
      type: string
      example: EK23 JWW
      description: Vehicle registration number
    engine_number:
      type: string
      example: 1234567890
      description: Vehicle engine number
    identifying_number:
      type: string
      example: 1234567890
      description: Vehicle identifying number (VIN in modern cars)
    page_size:
      type: number
      example: 10
      description: The number of items to return per page, usually used in conjunction with `page` to paginate a list of items
    page:
      type: number
      example: 1
      description: A page number, usually used in conjunction with `page_size` to paginate a list of items
    single_segment:
      type: object
      properties:
        active:
          type: boolean
        created:
          $ref: '#/components/schemas/datetime'
        description:
          type: string
        display_value:
          $ref: '#/components/schemas/display_value'
        last_updated:
          $ref: '#/components/schemas/datetime'
        legacy_uid:
          type: string
        mailchimp_sync:
          type: boolean
        name:
          type: string
        parent_segment:
          type: string
        record_state:
          type: string
        resource_type:
          $ref: '#/components/schemas/resource_type'
        rules:
          type: object
        segment_type:
          type: string
          enum:
            - dynamic
            - static
            - hybrid
            - auxiliary
          description: |
            Dynamic segments are based on a query that is run each time the segment is accessed.
            Static segments are lists of records.
            Hybrid segments are a combination of dynamic and static segments. They can support a rule with exclusions or inclusions.
            Auxiliary segments are nodes with no data of their own. They are used to group segments into a navigable hierarchy.
        system_segment:
          type: boolean
          description: |
            System segments are created by the system and cannot be edited or deleted.
        tags:
          type: array
          items:
            type: string
        uid:
          $ref: '#/components/schemas/uid'
        uri:
          $ref: '#/components/schemas/uri'
        uris_exclude:
          type: array
          items:
            $ref: '#/components/schemas/uri'
        uris_include:
          type: array
          items:
            $ref: '#/components/schemas/uri'
        user_interface:
          type: object
          properties:
            can_create_segment:
              type: boolean
            can_delete_segment:
              type: boolean
            can_edit_segment:
              type: boolean
            can_restore_segment:
              type: boolean
            policy_name:
              type: string
        view_context:
          type: array
          items:
            type: string
    all:
      properties:
        segments:
          type: array
          items:
            $ref: '#/components/schemas/single_segment'
    config:
      type: object
      properties:
        mapping:
          type: object
          properties:
            collection:
              type: string
            contact_field: {}
            contact_search_fields:
              type: array
              items: {}
            field_list:
              type: array
              items:
                type: string
            fields:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  form_type:
                    type: string
                  label:
                    type: string
                  style:
                    type: string
            join_orgs:
              type: boolean
            join_people:
              type: boolean
            name:
              type: string
            name_singular:
              type: string
            prefix:
              type: string
            search_fields:
              type: array
              items:
                type: string
            search_placeholder:
              type: string
            sort_by:
              type: array
              items:
                type: string
            unique_field:
              type: string
            use_mapreduce:
              type: boolean
        resource_type:
          type: string
        segment:
          $ref: '#/components/schemas/uri'
        segment_type:
          type: string
          enum:
            - dynamic
            - static
            - hybrid
            - auxiliary
        user_groups:
          type: array
          items: {}
        user_groups_for_display:
          type: array
          items: {}
        user_interface:
          type: object
          properties:
            can_bypass_gdpr:
              type: array
              items:
                type: boolean
            can_create_segment:
              type: boolean
            can_delete_segment:
              type: boolean
            can_edit_segment:
              type: boolean
            can_restore_segment:
              type: boolean
        view_context:
          type: array
          items:
            type: string
    count:
      type: object
      properties:
        count:
          type: integer
        description:
          type: string
        segment:
          $ref: '#/components/schemas/uri'
    lookup:
      type: array
      items:
        type: object
        properties:
          display_value:
            $ref: '#/components/schemas/display_value'
          id:
            $ref: '#/components/schemas/uri'
          label:
            type: string
          text:
            type: string
          uri:
            $ref: '#/components/schemas/uri'
          value:
            $ref: '#/components/schemas/uri'
    verbose:
      type: boolean
      example: true
      description: |
        A boolean value that can be used to return more verbose information
        in a response
    user_uri:
      type: string
      example: /sheepcrm/user/6305f074683e800f3abe809e/
      description: |
        The URI of a user account (CRM users will begin with /sheepcrm/
        App users with /sheepapp/)
    requestReport:
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/bucket'
        uid:
          $ref: '#/components/schemas/uid'
        lambda_prefix:
          type: string
        policy:
          type: string
        gdpr_bypass:
          type: boolean
        gdpr_channel:
          type: string
        user_uri:
          $ref: '#/components/schemas/user_uri'
        template:
          type: string
        journal_uri:
          $ref: '#/components/schemas/uri'
        use_mapreduce:
          type: boolean
        report_format:
          type: string
        debug:
          type: boolean
    requestSync:
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/bucket'
        lambda_prefix:
          type: string
        segment_uri:
          $ref: '#/components/schemas/uri'
        segment_name:
          type: string
        mailchimp_batch_size:
          type: integer
        verbose:
          type: boolean
        journal_uri:
          $ref: '#/components/schemas/uri'
        safe_mode:
          type: boolean
    fieldsetList:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        fieldsets:
          type: array
          items:
            type: object
            properties:
              applicable_resources:
                type: array
                items:
                  type: string
              created:
                type: string
              description:
                type: string
              fields:
                type: array
                items:
                  type: string
              last_updated:
                type: string
              name:
                type: string
              record_state:
                type: string
              uid:
                type: string
              uri:
                type: string
    fieldsetSingle:
      type: object
      properties:
        active:
          type: boolean
        applicable_resources:
          type: array
          items:
            type: string
        created:
          type: string
        description:
          type: string
        field_display:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              type:
                type: string
        fields:
          type: array
          items:
            type: string
        last_updated:
          type: string
        locked:
          type: boolean
        name:
          type: string
        record_state:
          type: string
        uid:
          type: string
        uri:
          type: string
    page_user_query:
      type: object
      properties:
        creator:
          type: string
          example: John Smith
        date_lower:
          $ref: '#/components/schemas/date'
        date_upper:
          $ref: '#/components/schemas/date'
        legacy_uid:
          $ref: '#/components/schemas/legacy_uid'
        tags:
          type: array
          items:
            type: string
          example:
            - tag1
            - tag2
        title:
          type: string
          example: My Title
        sort:
          type: string
          example: title
          enum:
            - title
            - date
            - '-title'
            - '-date'
          description: |
            Sort the results by `title` or `date` (default).
            To specify descending order for a field, prefix the field with a `-`
            e.g. `-date`
    user_account:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        first_name:
          type: string
        last_name:
          type: string
        last_login_date:
          $ref: '#/components/schemas/datetime'
        session_expiry:
          $ref: '#/components/schemas/datetime'
        uri:
          $ref: '#/components/schemas/uri'
        username:
          type: string
    user_context:
      type: object
      properties:
        contact_uri:
          $ref: '#/components/schemas/uri'
        is_logged_in:
          type: boolean
        is_member:
          type: boolean
        user_account:
          $ref: '#/components/schemas/user_account'
        username:
          type: string
    page_config:
      type: object
      properties:
        active:
          type: boolean
        archive_date:
          $ref: '#/components/schemas/uri'
        body:
          type: string
        fallback_body:
          type: string
        file:
          $ref: '#/components/schemas/url'
        filter:
          type: object
        legacy_uid:
          type: string
        member_only:
          type: boolean
        meta:
          type: object
        path:
          type: string
        photo:
          $ref: '#/components/schemas/url'
        public:
          type: boolean
        publish_date:
          $ref: '#/components/schemas/date'
        resource_type:
          $ref: '#/components/schemas/resource_type'
        secondary_photos:
          type: array
          items:
            $ref: '#/components/schemas/url'
        table_config: {}
        tags:
          type: array
          items:
            type: string
        template:
          type: string
        thumbnail:
          $ref: '#/components/schemas/url'
        title:
          type: string
        uri:
          $ref: '#/components/schemas/uri'
    responses-page:
      type: object
      properties:
        page_status:
          type: string
          example: OK
        allowed_access:
          type: boolean
          example: true
        page_type:
          type: string
          example: single
        resource:
          type: string
        user_context:
          $ref: '#/components/schemas/user_context'
        page_config:
          $ref: '#/components/schemas/page_config'
        path_elements:
          type: object
